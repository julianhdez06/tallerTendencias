Integrantes
Julian David Hernandez quintero
Andres Mauricio Cano
Resolver los ejercicios de acuerdo al número del grupo.

#Ejercicio 1: Gestión de Tiendas y Productos
    Problema: Crea un sistema para gestionar tiendas y productos. Define los siguientes modelos:

    Store (nombre, dirección, teléfono)
    Product (nombre, descripción, precio, stock, tienda [FK a Store])
    Category (nombre)
    ProductCategory (producto [FK a Product], categoría [FK a Category])
    Implementa una API REST que permita:

    - Crear y listar tiendas, productos y categorías.
    - Asignar categorías a productos.
    - Filtrar productos por tienda y categoría.

    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API



#Ejercicio 2: Sistema de Reservas de Eventos
    Problema: Desarrolla un sistema para gestionar reservas de eventos. Define los siguientes modelos:

    Event (nombre, descripción, fecha, ubicación, capacidad)
    Attendee (nombre, correo electrónico)
    Reservation (evento [FK a Event], asistente [FK a Attendee], número de entradas)
    Implementa una API REST que permita:

    - Crear y listar eventos y asistentes.
    - Realizar y cancelar reservas para eventos.
    - Consultar la disponibilidad de entradas y la lista de asistentes para un evento específico.
    
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

#Ejercicio 3: Plataforma de Gestión de Proyectos
    Problema: Implementa una plataforma para gestionar proyectos y tareas. Define los siguientes modelos:

    Project (nombre, descripción, fecha de inicio, fecha de finalización, estado)
    Task (nombre, descripción, fecha de vencimiento, estado, proyecto [FK a Project])
    User (nombre, correo electrónico)
    ProjectAssignment (proyecto [FK a Project], usuario [FK a User], rol)
    Implementa una API REST que permita:

    -Crear y listar proyectos y tareas.
    -Asignar usuarios a proyectos con roles específicos.
    -Actualizar el estado de tareas y proyectos.
    -Consultar las tareas pendientes para un proyecto específico.

    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

#Ejercicio 4: Plataforma de Cursos en Línea
    Problema: Desarrolla una plataforma para gestionar cursos en línea. Define los siguientes modelos:

    Course (nombre, descripción, fecha de inicio, fecha de finalización, instructor [FK a User])
    Lesson (nombre, contenido, curso [FK a Course])
    Enrollment (curso [FK a Course], estudiante [FK a User], fecha de inscripción)
    Quiz (nombre, curso [FK a Course])
    Question (texto, opciones, respuesta correcta, quiz [FK a Quiz])
    Implementa una API REST que permita:

    -Crear y listar cursos, lecciones, y cuestionarios.
    -Inscribir estudiantes en cursos y consultar sus inscripciones.
    -Administrar preguntas y respuestas en cuestionarios.
    -Consultar los resultados de los cuestionarios para un curso específico.
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

#Ejercicio 5: Sistema de Gestión de Inventarios y Pedidos
    Problema: Implementa un sistema para gestionar inventarios y pedidos. Define los siguientes modelos:

    Inventory (producto [FK a Product], cantidad disponible)
    Order (cliente [FK a User], fecha de pedido, estado)
    OrderItem (pedido [FK a Order], producto [FK a Product], cantidad, precio unitario)
    Implementa una API REST que permita:

    - Crear y listar productos e inventarios.
    - Realizar y consultar pedidos, incluyendo la adición y eliminación de artículos.
    - Actualizar el estado de los pedidos y consultar el historial de pedidos de un cliente.
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

#Ejercicio 6: Plataforma de Redes Sociales
    Problema: Desarrolla una plataforma de redes sociales. Define los siguientes modelos:

    UserProfile (usuario [FK a User], bio, foto de perfil)
    Post (usuario [FK a User], contenido, fecha de publicación)
    Comment (post [FK a Post], usuario [FK a User], contenido)
    Like (post [FK a Post], usuario [FK a User])
    Implementa una API REST que permita:

    -Crear y listar perfiles de usuario, publicaciones, comentarios y likes.
    -Consultar los comentarios y likes de una publicación específica.
    -Permitir que los usuarios sigan y dejen de seguir a otros usuarios (opcional).
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

#Ejercicio 7: Sistema de Gestión de Subastas
    Problema: Implementa un sistema para gestionar subastas. Define los siguientes modelos:

    Auction (nombre, descripción, fecha de inicio, fecha de finalización)
    Bid (subasta [FK a Auction], usuario [FK a User], cantidad)
    Item (nombre, descripción, subasta [FK a Auction], precio inicial)
    Implementa una API REST que permita:

    - Crear y listar subastas e ítems.
    - Realizar y consultar ofertas en subastas.
    - Consultar el estado de una subasta y el ítem subastado más alto.
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

Ejercicio 8: Sistema de Gestión de Documentos
    Problema: Desarrolla un sistema para gestionar documentos. Define los siguientes modelos:

    Document (nombre, descripción, archivo, fecha de carga, propietario [FK a User])
    Tag (nombre)
    DocumentTag (documento [FK a Document], etiqueta [FK a Tag])
    Implementa una API REST que permita:

    Subir y listar documentos.
    Asignar y consultar etiquetas asociadas a documentos.
    Consultar documentos por etiquetas.
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

Ejercicio 9: Sistema de Recomendaciones
    Problema: Desarrolla un sistema de recomendaciones de productos. Define los siguientes modelos:

    Product (nombre, descripción, precio)
    User (nombre, correo electrónico)
    Recommendation (usuario [FK a User], producto [FK a Product], puntuación)
    Implementa una API REST que permita:

    - Crear y listar productos y recomendaciones.
    - Consultar recomendaciones para un usuario específico.
    - Calcular y mostrar los productos más recomendados por puntuación.
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

#Ejercicio 10: Sistema de Gestión de Tickets de Soporte
    Problema: Desarrolla un sistema para gestionar tickets de soporte. Define los siguientes modelos:

    Ticket (asunto, descripción, estado, fecha de creación, cliente [FK a User], soporte [FK a User])
    Comment (ticket [FK a Ticket], usuario [FK a User], contenido)
    Implementa una API REST que permita:

    - Crear y listar tickets y comentarios.
    - Actualizar el estado de los tickets y asignar soporte.
    - Consultar los comentarios de un ticket específico.
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API

Ejercicio 11: Plataforma de Evaluación de Desempeño
    Problema: Implementa una plataforma para evaluar el desempeño de empleados. Define los siguientes modelos:

    Employee (nombre, correo electrónico, puesto)
    PerformanceReview (empleado [FK a Employee], fecha, calificación, comentarios)
    ReviewCriteria (nombre, descripción)
    Implementa una API REST que permita:

    - Crear y listar empleados, evaluaciones y criterios de evaluación.
    - Realizar y consultar evaluaciones de desempeño.
    - Consultar el historial de evaluaciones para un empleado específico.
    #Resultado: Enviar un PR (Pull request)  al branch de su grupo  en un archivo llamado de word , mostrar los resultados de la API, ingresar datos de ejemplo que demuestre el funcionamiento de la API
